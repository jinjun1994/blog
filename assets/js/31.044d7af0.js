(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{346:function(e,s,n){"use strict";n.r(s);var t=n(5),a=Object(t.a)({},function(){var e=this,s=e.$createElement,n=e._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"组件：组件间通讯"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组件：组件间通讯","aria-hidden":"true"}},[e._v("#")]),e._v(" 组件：组件间通讯")]),e._v(" "),n("p",[n("img",{attrs:{src:"http://images.gitbook.cn/08a931a0-ae67-11e7-8003-dd1d9d56caa7",alt:"enter image description here"}})]),e._v(" "),n("p",[e._v("组件就像零散的积木，我们需要把这些积木按照一定的规则拼装起来，而且要让它们互相之间能进行通讯，这样才能构成一个有机的完整系统。")]),e._v(" "),n("p",[e._v("在真实的应用中，组件最终会构成树形结构，就像人类社会中的家族树一样：")]),e._v(" "),n("p",[n("img",{attrs:{src:"http://images.gitbook.cn/891636a0-af23-11e7-b111-4d6e630f480d",alt:"enter image description here"}})]),e._v(" "),n("p",[e._v("在树形结构里面，组件之间有几种典型的关系：父子关系、兄弟关系、没有直接关系。")]),e._v(" "),n("p",[e._v("相应地，组件之间有以下几种典型的通讯方案：")]),e._v(" "),n("ul",[n("li",[e._v("直接的父子关系：父组件直接访问子组件的 public 属性和方法。")]),e._v(" "),n("li",[e._v("直接的父子关系：借助于 @Input 和 @Output 进行通讯")]),e._v(" "),n("li",[e._v("没有直接关系：借助于 Service 单例进行通讯。")]),e._v(" "),n("li",[e._v("利用 cookie 和 localstorage 进行通讯。")]),e._v(" "),n("li",[e._v("利用 session 进行通讯。")])]),e._v(" "),n("p",[e._v("无论你使用什么前端框架，组件之间的通讯都离开不以上几种方案，这些方案与具体框架无关。")]),e._v(" "),n("h2",{attrs:{id:"angular组件间通讯"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#angular组件间通讯","aria-hidden":"true"}},[e._v("#")]),e._v(" Angular组件间通讯")]),e._v(" "),n("h3",{attrs:{id:"直接调用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#直接调用","aria-hidden":"true"}},[e._v("#")]),e._v(" 直接调用")]),e._v(" "),n("p",[e._v("对于有直接父子关系的组件，父组件可以直接访问子组件里面 public 型的属性和方法，示例代码片段如下：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<child #child></child>\n<button (click)="child.childFn()" class="btn btn-success">调用子组件方法</button>\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("显然，子组件里面必须暴露一个 public 型的 childFn 方法，就像这样：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public childFn():void{\n    console.log("子组件的名字是>"+this.panelTitle);\n}\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("p",[e._v("以上是通过在模板里面定义局部变量的方式来直接调用子组件里面的 public 型方法。在父组件的内部也可以访问到子组件的实例，需要利用到 @ViewChild 装饰器，示例如下：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@ViewChild(ChildComponent)\nprivate childComponent: ChildComponent;\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("关于 @ViewChild 在后面的内容里面会有更详细的解释。")]),e._v(" "),n("p",[e._v("很明显，如果父组件直接访问子组件，那么两个组件之间的关系就被固定死了。父子两个组件紧密依赖，谁也离不开谁，也就都不能单独使用了。所以，除非你知道自己在做什么，最好不要直接在父组件里面直接访问子组件上的属性和方法，以免未来一改一大片。")]),e._v(" "),n("h3",{attrs:{id:"input-和-output"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#input-和-output","aria-hidden":"true"}},[e._v("#")]),e._v(" @Input 和 @Output")]),e._v(" "),n("p",[e._v("我们可以利用 @Input 装饰器，让父组件直接给子组件传递参数，子组件上这样写：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Input()\npublic panelTitle:string;\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("父组件上可以这样设置 panelTitle 这个参数：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<child panelTitle="一个新的标题"></child>\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("@Output 的本质是事件机制，我们可以利用它来监听子组件上派发的事件，子组件上这样写：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Output()\npublic follow=new EventEmitter<string>();\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("触发 follow 事件的方式如下：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('this.follow.emit("follow");\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("父组件上可以这样监听 follow 事件：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<child (follow)="doSomething()"></child>\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("我们可以利用 @Output 来自定义事件，监听自定义事件的方式也是通过小圆括号，与监听 HTML 原生事件的方式一模一样。")]),e._v(" "),n("h3",{attrs:{id:"利用-service-单例进行通讯"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#利用-service-单例进行通讯","aria-hidden":"true"}},[e._v("#")]),e._v(" 利用 Service 单例进行通讯")]),e._v(" "),n("p",[n("img",{attrs:{src:"http://images.gitbook.cn/d2615600-af23-11e7-9203-4582e2e80f6b",alt:"enter image description here"}})]),e._v(" "),n("p",[e._v("如果你在根模块（一般是 app.module.ts）的 providers 里面注册一个 Service，那么这个 Service 就是全局单例的，这样一来我们就可以利用这个单例的 Service 在不同的组件之间进行通讯了。")]),e._v(" "),n("ul",[n("li",[e._v("比较粗暴的方式：我们可以在 Service 里面定义 public 型的共享变量，然后让不同的组件都来访问这块变量，从而达到共享数据的目的。")]),e._v(" "),n("li",[e._v("优雅一点的方式：利用 RxJS，在 Service 里面定义一个 public 型的 Subject（主题），然后让所有组件都来subscribe（订阅）这个主题，类似于一种“事件总线”的效果。")])]),e._v(" "),n("p",[e._v("实例代码片段：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\n/**\n * 用来充当事件总线的Service\n */\n@Injectable()\nexport class EventBusService {\n  public eventBus:Subject<string> = new Subject<string>();\n\n  constructor() { }\n\n}\nimport { Component, OnInit } from '@angular/core';\nimport { EventBusService } from '../service/event-bus.service';\n\n@Component({\n  selector: 'child-1',\n  templateUrl: './child-1.component.html',\n  styleUrls: ['./child-1.component.css']\n})\nexport class Child1Component implements OnInit {\n\n  constructor(public eventBusService:EventBusService) { }\n\n  ngOnInit() {\n  }\n\n  public triggerEventBus():void{\n    this.eventBusService.eventBus.next(\"第一个组件触发的事件\");\n  }\n}\nimport { Component, OnInit } from '@angular/core';\nimport { EventBusService } from '../service/event-bus.service';\n\n@Component({\n  selector: 'child-2',\n  templateUrl: './child-2.component.html',\n  styleUrls: ['./child-2.component.css']\n})\nexport class Child2Component implements OnInit {\n  public events:Array<any>=[];\n\n  constructor(public eventBusService:EventBusService) {\n\n  }\n\n  ngOnInit() {\n    this.eventBusService.eventBus.subscribe((value)=>{\n      this.events.push(value+\"-\"+new Date());\n    });\n  }\n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br"),n("span",{staticClass:"line-number"},[e._v("43")]),n("br"),n("span",{staticClass:"line-number"},[e._v("44")]),n("br"),n("span",{staticClass:"line-number"},[e._v("45")]),n("br"),n("span",{staticClass:"line-number"},[e._v("46")]),n("br"),n("span",{staticClass:"line-number"},[e._v("47")]),n("br"),n("span",{staticClass:"line-number"},[e._v("48")]),n("br"),n("span",{staticClass:"line-number"},[e._v("49")]),n("br"),n("span",{staticClass:"line-number"},[e._v("50")]),n("br"),n("span",{staticClass:"line-number"},[e._v("51")]),n("br"),n("span",{staticClass:"line-number"},[e._v("52")]),n("br"),n("span",{staticClass:"line-number"},[e._v("53")]),n("br"),n("span",{staticClass:"line-number"},[e._v("54")]),n("br")])]),n("h3",{attrs:{id:"利用-cookie-或者-localstorage-进行通讯"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#利用-cookie-或者-localstorage-进行通讯","aria-hidden":"true"}},[e._v("#")]),e._v(" 利用 cookie 或者 localstorage 进行通讯")]),e._v(" "),n("p",[n("img",{attrs:{src:"http://images.gitbook.cn/e9aaf1e0-af23-11e7-b111-4d6e630f480d",alt:"enter image description here"}})]),e._v(" "),n("p",[e._v("示例代码片段：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public writeData():void{\n    window.localStorage.setItem("json",JSON.stringify({name:\'jinjun\',age:18}));\n}\nvar json=window.localStorage.getItem("json");\n// window.localStorage.removeItem("json");\nvar obj=JSON.parse(json);\nconsole.log(obj.name);\nconsole.log(obj.age);\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("p",[n("strong",[e._v("很多朋友写 Angular 代码的时候出现了思维定势，总感觉 Angular 会封装所有东西，实际上并非如此。比如 cookie、localstorage 这些东西都可以直接用原生的 API 进行操作的。千万别忘记原生的那些 API 啊，都能用的！")])]),e._v(" "),n("h3",{attrs:{id:"利用-session-进行通讯"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#利用-session-进行通讯","aria-hidden":"true"}},[e._v("#")]),e._v(" 利用 session 进行通讯")]),e._v(" "),n("p",[n("img",{attrs:{src:"http://images.gitbook.cn/79246040-af24-11e7-b111-4d6e630f480d",alt:"enter image description here"}})]),e._v(" "),n("h2",{attrs:{id:"vue组件间通讯"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue组件间通讯","aria-hidden":"true"}},[e._v("#")]),e._v(" Vue组件间通讯")]),e._v(" "),n("h3",{attrs:{id:"现代通信方式-flux-vuex"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#现代通信方式-flux-vuex","aria-hidden":"true"}},[e._v("#")]),e._v(" 现代通信方式: FLUX VUEX")]),e._v(" "),n("p",[n("strong",[e._v("FLUX将一个应用分成四个部分")]),e._v(":"),n("a",{attrs:{href:"https://link.juejin.im/?target=http%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2016%2F01%2Fflux.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("文档"),n("OutboundLink")],1)]),e._v(" "),n("ol",[n("li",[e._v("View： 视图层")]),e._v(" "),n("li",[e._v("Action（动作）：视图层发出的消息（比如mouseClick）")]),e._v(" "),n("li",[e._v("Dispatcher（派发器）：用来接收Actions、执行回调函数")]),e._v(" "),n("li",[e._v("Store（数据层Model）：用来存放应用的状态，一旦发生变动，就提醒Views要更新页面")])]),e._v(" "),n("p",[e._v("flux最大的特性是“单向数据流”，具体流程：")]),e._v(" "),n("ol",[n("li",[e._v("用户访问 View,")]),e._v(" "),n("li",[e._v("View 发出用户的 Action,")]),e._v(" "),n("li",[e._v("Dispatcher 收到 Action，要求 Store 进行相应的更新")]),e._v(" "),n("li",[e._v("Store 更新后，发出一个”change”事件")]),e._v(" "),n("li",[e._v("View 收到”change”事件后，更新页面\n"),n("a",{attrs:{href:"https://link.juejin.im/?target=http%3A%2F%2Fzhentaoo.com%2Fimg%2Fflux.png",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/10/23/37363e31f10108cfbebdd300193fe6dc?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}}),n("OutboundLink")],1)])]),e._v(" "),n("p",[n("strong",[e._v("VUEX")]),e._v(":"),n("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fvuex.vuejs.org%2Fzh-cn%2Fintro.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方文档"),n("OutboundLink")],1),e._v("\nVuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。\n我们把组件的共享状态抽取出来，以一个全局单例模式管理,在这种模式下，我们的组件树构成了一个巨大的“视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为！\n注：action可以是异步的，但mutations一定是同步的")]),e._v(" "),n("p",[e._v("对于一个的VUEX应用来说,FLUX的概念被具化成：")]),e._v(" "),n("ol",[n("li",[e._v("VUE: 视图层")]),e._v(" "),n("li",[e._v("Action（动作）：视图层发出的消息（比如mouseClick）")]),e._v(" "),n("li",[e._v("Mutations（派发器）：用来接收Actions、执行回调函数")]),e._v(" "),n("li",[e._v("State（数据层Model）：用来存放应用的状态，一旦发生变动，就提醒Vue要更新页面\n"),n("a",{attrs:{href:"https://link.juejin.im/?target=http%3A%2F%2Fzhentaoo.com%2Fimg%2Fvuex.png",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/10/23/45f2d7c2f94cfdc3fe3c72041319ce85?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"vuex"}}),n("OutboundLink")],1),e._v("vuex")])]),e._v(" "),n("h3",{attrs:{id:"父子组件通信-props，events"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#父子组件通信-props，events","aria-hidden":"true"}},[e._v("#")]),e._v(" 父子组件通信:props，events")]),e._v(" "),n("p",[n("strong",[e._v("父->子")]),e._v(": 父组件使用 props 把数据传给子组件,文档如下\n"),n("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fguide%2Fcomponents.html%23%E4%BD%BF%E7%94%A8-Prop-%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE",target:"_blank",rel:"noopener noreferrer"}},[e._v("cn.vuejs.org/v2/guide/co…"),n("OutboundLink")],1)]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<child message="hello!"></child>\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Vue.component('child', {\n  // 声明 props\n  props: ['message'],\n  // 就像 data 一样，prop 可以用在模板内\n  // 同样也可以在 vm 实例中像 “this.message” 这样使用\n  template: '<span>{{ message }}</span>'\n})\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[e._v("需要"),n("strong",[e._v("注意")]),e._v("的是，子组件不能修改父组件的props\n因为一个父组件下可能有多个子组件，如果某个子组件修改了父组件传递的props，\n很可能导致其他子组件也就跟着变化，最终导致整个应用的状态难以管理和维护\n所以不允许子组件修改props")]),e._v(" "),n("p",[n("strong",[e._v("子->父")]),e._v(": 子组件自定义事件，父组件可以在使用子组件的地方直接用 v-on 来监听子组件触发的事件")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<div id="counter-event-example">\n  <p>{{ total }}</p>\n  <button-counter v-on:increment="incrementTotal"></button-counter>\n  <button-counter v-on:increment="incrementTotal"></button-counter>\n</div>\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Vue.component('button-counter', {\n  template: '<button v-on:click=\"increment\">{{ counter }}</button>',\n  data: function () {\n    return {\n      counter: 0\n    }\n  },\n  methods: {\n    increment: function () {\n      this.counter += 1\n      this.$emit('increment')\n    }\n  },\n})\nnew Vue({\n  el: '#counter-event-example',\n  data: {\n    total: 0\n  },\n  methods: {\n    incrementTotal: function () {\n      this.total += 1\n    }\n  }\n})\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br")])]),n("h3",{attrs:{id:"非父子组件通信-event-bus"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#非父子组件通信-event-bus","aria-hidden":"true"}},[e._v("#")]),e._v(" 非父子组件通信: event bus")]),e._v(" "),n("p",[e._v("官方文档："),n("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fguide%2Fcomponents.html%23%E9%9D%9E%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1",target:"_blank",rel:"noopener noreferrer"}},[e._v("cn.vuejs.org/v2/guide/co…"),n("OutboundLink")],1),e._v("\n有时候非父子关系的组件也需要通信。在简单的场景下，使用一个空的 Vue 实例作为中央事件总线\n在这两个组件之间引入这个中央事件总线，然后emit，on相应的事件")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var bus = new Vue()\n// 触发组件 A 中的事件\nbus.$emit('id-selected', 1)\n// 在组件 B 创建的钩子中监听事件\nbus.$on('id-selected', function (id) {\n  // ...\n})\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("h3",{attrs:{id:"小结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#小结","aria-hidden":"true"}},[e._v("#")]),e._v(" 小结")]),e._v(" "),n("p",[e._v("组件间的通讯方案是通用的，无论你使用什么样的前端框架，都会面临这个问题，而解决的方案无外乎本文所列出的几种。")])])},[],!1,null,null,null);s.default=a.exports}}]);