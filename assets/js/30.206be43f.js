(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{348:function(e,v,_){"use strict";_.r(v);var t=_(5),r=Object(t.a)({},function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("ul",[_("li",[e._v("什么是 UI 组件的生命周期？")]),e._v(" "),_("li",[e._v("Angular 组件的生命周期有什么特别的地方？")]),e._v(" "),_("li",[e._v("OnPush 策略的使用方式。")]),e._v(" "),_("li",[e._v("脏检查的实现原理。")])]),e._v(" "),_("h2",{attrs:{id:"ui-组件的生命周期"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ui-组件的生命周期","aria-hidden":"true"}},[e._v("#")]),e._v(" UI 组件的生命周期")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://images.gitbook.cn/e4cf9d10-af2d-11e7-b111-4d6e630f480d",alt:"enter image description here"}})]),e._v(" "),_("p",[e._v("无论使用什么样的前端框架，只要编写 UI 组件，生命周期都是必须要考虑的重要内容。请展开你的想象，如果让你来设计 UI 系统，组件有几个重要的阶段一定是绕不开的，比如：")]),e._v(" "),_("ul",[_("li",[e._v("初始化（ init ）阶段：在这个阶段你需要把组件 new 出来，把一些属性设置上去，等等这些操作。")]),e._v(" "),_("li",[e._v("渲染（ render ）阶段：在这个阶段需你要把组件的模板和数据结合起来，生成 HTML 标签结构，并且要整合到现有的 DOM 树里面去。")]),e._v(" "),_("li",[e._v("存活阶段：既然带有 UI，那么在组件的存活期内就一定会和用户进行交互。一般来说，带有 UI 的系统都是通过事件机制进行用户交互的。也就是说，这个阶段将会处理大量的用户事件：鼠标点击、键盘按键、手指触摸。")]),e._v(" "),_("li",[e._v("销毁（ destory ）阶段：最后，组件使用完了，需要把一些资源释放掉。最典型的操作：需要把组件上的所有事件全部清理干净，避免造成内存泄漏。")])]),e._v(" "),_("p",[e._v("在组件生命的不同阶段，框架一般会暴露出一些“接口”，开发者可以利用这些接口来实现一些自己的业务逻辑。这种接口在有些框架里面叫做“事件”，在 Angular 里面叫做“钩子”，但其底层的本质都是一样的。")]),e._v(" "),_("h2",{attrs:{id:"angular-组件生命周期钩子"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#angular-组件生命周期钩子","aria-hidden":"true"}},[e._v("#")]),e._v(" Angular 组件生命周期钩子")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://images.gitbook.cn/f3fc8050-af2d-11e7-bdfa-890a7a50d411",alt:"enter image description here"}})]),e._v(" "),_("ul",[_("li",[_("p",[e._v("Angular 一共暴露了8个“钩子”，构造函数不算。")])]),e._v(" "),_("li",[_("p",[e._v("并没有组件或者指令会实现全部钩子。")])]),e._v(" "),_("li",[_("p",[e._v("绿色的4个钩子可能会被执行很多次，紫色的只会执行一次。")])]),e._v(" "),_("li",[_("p",[e._v("Content 和 View 相关的4个钩子只对组件有效，指令上不能使用。因为在新版本的 Angular 里面，指令不能带有 HTML 模板。指令没有自己的 UI，当然就没有 View 和 Content 相关的“钩子”了。")])]),e._v(" "),_("li",[_("p",[e._v("请不要在生命周期钩子里面实现复杂的业务逻辑，尤其是那4个会被反复执行的钩子，否则一定会造成界面卡顿。")])])]),e._v(" "),_("h3",{attrs:{id:"生命周期的顺序"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#生命周期的顺序","aria-hidden":"true"}},[e._v("#")]),e._v(" 生命周期的顺序")]),e._v(" "),_("p",[e._v("当 Angular 使用构造函数新建一个组件或指令后，就会按下面的顺序在特定时刻调用这些生命周期钩子方法：")]),e._v(" "),_("table",[_("thead",[_("tr",[_("th",[e._v("钩子")]),e._v(" "),_("th",[e._v("用途及时机")])])]),e._v(" "),_("tbody",[_("tr",[_("td",[_("code",[e._v("ngOnChanges()")])]),e._v(" "),_("td",[e._v("当 Angular（重新）设置数据绑定输入属性时响应。 该方法接受当前和上一属性值的 "),_("code",[e._v("SimpleChanges")]),e._v(" 对象当被绑定的输入属性的值发生变化时调用，首次调用一定会发生在 "),_("code",[e._v("ngOnInit()")]),e._v(" 之前。")])]),e._v(" "),_("tr",[_("td",[_("code",[e._v("ngOnInit()")])]),e._v(" "),_("td",[e._v("在 Angular 第一次显示数据绑定和设置指令/组件的输入属性之后，初始化指令/组件。在第一轮 "),_("code",[e._v("ngOnChanges()")]),e._v(" 完成之后调用，只调用"),_("strong",[e._v("一次")]),e._v("。")])]),e._v(" "),_("tr",[_("td",[_("code",[e._v("ngDoCheck()")])]),e._v(" "),_("td",[e._v("检测，并在发生 Angular 无法或不愿意自己检测的变化时作出反应。在每个 Angular 变更检测周期中调用，"),_("code",[e._v("ngOnChanges()")]),e._v(" 和 "),_("code",[e._v("ngOnInit()")]),e._v("之后。")])]),e._v(" "),_("tr",[_("td",[_("code",[e._v("ngAfterContentInit()")])]),e._v(" "),_("td",[e._v("当把内容投影进组件之后调用。第一次 "),_("code",[e._v("ngDoCheck()")]),e._v(" 之后调用，只调用一次。")])]),e._v(" "),_("tr",[_("td",[_("code",[e._v("ngAfterContentChecked()")])]),e._v(" "),_("td",[e._v("每次完成被投影组件内容的变更检测之后调用。"),_("code",[e._v("ngAfterContentInit()")]),e._v(" 和每次 "),_("code",[e._v("ngDoCheck()")]),e._v(" 之后调用")])]),e._v(" "),_("tr",[_("td",[_("code",[e._v("ngAfterViewInit()")])]),e._v(" "),_("td",[e._v("初始化完组件视图及其子视图之后调用。第一次 "),_("code",[e._v("ngAfterContentChecked()")]),e._v(" 之后调用，只调用一次。")])]),e._v(" "),_("tr",[_("td",[_("code",[e._v("ngAfterViewChecked()")])]),e._v(" "),_("td",[e._v("每次做完组件视图和子视图的变更检测之后调用。"),_("code",[e._v("ngAfterViewInit()")]),e._v(" 和每次 "),_("code",[e._v("ngAfterContentChecked()")]),e._v(" 之后调用。")])]),e._v(" "),_("tr",[_("td",[_("code",[e._v("ngOnDestroy()")])]),e._v(" "),_("td",[e._v("当 Angular 每次销毁指令/组件之前调用并清扫。 在这儿反订阅可观察对象和分离事件处理器，以防内存泄漏。在 Angular 销毁指令/组件之前调用。")])])])]),e._v(" "),_("h3",{attrs:{id:"onpush-策略"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#onpush-策略","aria-hidden":"true"}},[e._v("#")]),e._v(" OnPush 策略")]),e._v(" "),_("p",[e._v("在真实的业务系统中，组件会构成 Tree 型结构，就像这样：")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://images.gitbook.cn/080f5b30-af2e-11e7-bdfa-890a7a50d411",alt:"enter image description here"}})]),e._v(" "),_("p",[e._v("当某个叶子组件上的数据模型发生变化之后，就像这样：")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://images.gitbook.cn/2fbab0d0-af2e-11e7-a2ac-75e3e38b9209",alt:"enter image description here"}})]),e._v(" "),_("p",[_("strong",[e._v("这时候，Angular 将会从根组件开始，遍历整颗组件树，把所有组件上的 ngDoCheck() 方法都调用一遍：")])]),e._v(" "),_("p",[_("img",{attrs:{src:"http://images.gitbook.cn/3fa12010-af2e-11e7-9203-4582e2e80f6b",alt:"enter image description here"}})]),e._v(" "),_("p",[e._v("**请注意，默认情况下，无论哪个叶子组件上发生了变化，都会把整个组件树遍历一遍。**如果组件树非常庞大，嵌套非常深，很明显会有效率问题。在绝大部分时间里面，并不会出现每个组件都需要刷新的情况，根本没有必要每次都去全部遍历。所以 Angular 提供了一种叫做 OnPush 的策略，只要把某个组件上的检测策略设置为 OnPush，就可以忽略整个子树了，就像这样：")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://images.gitbook.cn/49c3bad0-af2e-11e7-b111-4d6e630f480d",alt:"enter image description here"}})]),e._v(" "),_("p",[e._v("很明显，使用了 OnPush 策略之后，检查效率将会获得大幅度的提升，尤其在组件的数量非常多的情况下：")]),e._v(" "),_("p",[e._v("Angular 内置的两种变更检测策略：")]),e._v(" "),_("ul",[_("li",[e._v("Default：无论哪个组件发生了变化，从根组件开始全局遍历，调用每个组件上的 ngDoCheck() 钩子。")]),e._v(" "),_("li",[e._v("OnPush：只有当组件的 @Input 属性发生变化的时候才调用本组件的 ngDoCheck() 钩子。")])]),e._v(" "),_("p",[e._v("有一些开发者建议 Angular 项目组把 OnPush 作为默认策略，但是目前还没有得到官方支持，或许在未来的某个版本里面会进行修改。")]),e._v(" "),_("h3",{attrs:{id:"了解一点点原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#了解一点点原理","aria-hidden":"true"}},[e._v("#")]),e._v(" 了解一点点原理")]),e._v(" "),_("p",[e._v("如果你不想看到扯原理的内容，可以跳过这一小段。")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://images.gitbook.cn/881e4110-af2e-11e7-a2ac-75e3e38b9209",alt:"enter image description here"}})]),e._v(" "),_("p",[e._v("大家都知道，AngularJS 是第一个把“双向数据绑定”这种设计带到前端领域来的框架，“双向数据绑定”最典型的场景就是对表单的处理。")]),e._v(" "),_("p",[e._v("双向数据绑定的目标很明确：数据模型发生变化之后，界面可以自动刷新；用户修改了界面上的内容之后，数据模型也会发生自动修改。")]),e._v(" "),_("p",[e._v("很明显，这里需要一种同步机制，在 Angular 里面这种同步机制叫做“变更检测”。")]),e._v(" "),_("p",[e._v("在老版本 AgnularJS 里面，变更检测机制实现得不太完善，经常会出现检测不到变更的情况，所以才有了让大家很厌烦的 $apply() 调用。")]),e._v(" "),_("p",[e._v("在新版本的 Angular 里面不再存在这个问题了，因为新版本的 Angular 使用 Zone.js 这个库，它会把所有可能导致数据模型发生变更的情况全部拦截掉，从而在数据发生变化的时候去通知 Angular 进行刷新。")]),e._v(" "),_("p",[e._v("有一些朋友可能会觉得奇怪，Zone.js 怎么这么牛叉？它内部到底是怎么玩的呢？")]),e._v(" "),_("p",[e._v("实际上要做到这一点并不复杂，因为在浏览器环境下，有可能导致数据模型发生变化的情况只有3种典型的回调：")]),e._v(" "),_("ul",[_("li",[e._v("事件回调：鼠标、键盘、触摸")]),e._v(" "),_("li",[e._v("定时器回调：setTimeout 和 setInterval")]),e._v(" "),_("li",[e._v("Ajax 回调")])]),e._v(" "),_("p",[e._v("Zone.js 覆盖了所有原生实现，当开发者在调用这些函数的时候，并不是调用的原生方法，而是调用的 Zone.js 自己的实现，所以 Zone.js 就可以做一些自己的处理了。")]),e._v(" "),_("p",[_("a",{attrs:{href:"https://blog.thoughtram.io/angular/2016/02/22/angular-2-change-detection-explained.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Angular变更检测详解"),_("OutboundLink")],1)]),e._v(" "),_("h2",{attrs:{id:"vue组件生命周期钩子："}},[_("a",{staticClass:"header-anchor",attrs:{href:"#vue组件生命周期钩子：","aria-hidden":"true"}},[e._v("#")]),e._v(" Vue组件生命周期钩子：")]),e._v(" "),_("p",[e._v("关于组件的生命周期，是时候放出这张图片了：")]),e._v(" "),_("p",[_("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/7/21/164bbf610b61f3cd?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),e._v(" "),_("p",[e._v("这张图片已经讲得很清楚了，很多人这部分也很清楚了，大部分生命周期并不会用到，这里提一下几点：")]),e._v(" "),_("ol",[_("li",[_("p",[_("strong",[e._v("ajax请求最好放在created里面")]),e._v("，因为此时已经可以访问"),_("code",[e._v("this")]),e._v("了，请求到数据就可以直接放在"),_("code",[e._v("data")]),e._v("里面。")]),e._v(" "),_("p",[e._v("这里也碰到过几次，面试官问：ajax请求应该放在哪个生命周期。")])]),e._v(" "),_("li",[_("p",[_("strong",[e._v("关于dom的操作要放在mounted里面")]),e._v("，在"),_("code",[e._v("mounted")]),e._v("前面访问dom会是"),_("code",[e._v("undefined")]),e._v("。")])]),e._v(" "),_("li",[_("p",[e._v("每次进入/离开组件都要做一些事情，用什么钩子：")])])]),e._v(" "),_("ul",[_("li",[_("p",[e._v("不缓存：")]),e._v(" "),_("p",[e._v("进入的时候可以用"),_("code",[e._v("created")]),e._v("和"),_("code",[e._v("mounted")]),e._v("钩子，离开的时候用"),_("code",[e._v("beforeDestory")]),e._v("和"),_("code",[e._v("destroyed")]),e._v("钩子,"),_("code",[e._v("beforeDestory")]),e._v("可以访问"),_("code",[e._v("this")]),e._v("，"),_("code",[e._v("destroyed")]),e._v("不可以访问"),_("code",[e._v("this")]),e._v("。")])]),e._v(" "),_("li",[_("p",[e._v("缓存了组件：")]),e._v(" "),_("p",[e._v("缓存了组件之后，再次进入组件不会触发"),_("code",[e._v("beforeCreate")]),e._v("、"),_("code",[e._v("created")]),e._v(" 、"),_("code",[e._v("beforeMount")]),e._v("、 "),_("code",[e._v("mounted")]),e._v("，"),_("strong",[e._v("如果你想每次进入组件都做一些事情的话，你可以放在activated进入缓存组件的钩子中")]),e._v("。")]),e._v(" "),_("p",[e._v("同理：离开缓存组件的时候，"),_("code",[e._v("beforeDestroy")]),e._v("和"),_("code",[e._v("destroyed")]),e._v("并不会触发，可以使用"),_("code",[e._v("deactivated")]),e._v("离开缓存组件的钩子来代替。")])])]),e._v(" "),_("hr"),e._v(" "),_("h3",{attrs:{id:"触发钩子的完整顺序："}},[_("a",{staticClass:"header-anchor",attrs:{href:"#触发钩子的完整顺序：","aria-hidden":"true"}},[e._v("#")]),e._v(" 触发钩子的完整顺序：")]),e._v(" "),_("p",[e._v("将路由导航、"),_("code",[e._v("keep-alive")]),e._v("、和组件生命周期钩子结合起来的，触发顺序，假设是从a组件离开，第一次进入b组件：")]),e._v(" "),_("ol",[_("li",[_("code",[e._v("beforeRouteLeave")]),e._v(":路由组件的组件离开路由前钩子，可取消路由离开。")]),e._v(" "),_("li",[_("code",[e._v("beforeEach")]),e._v(": 路由全局前置守卫，可用于登录验证、全局路由loading等。")]),e._v(" "),_("li",[_("code",[e._v("beforeEnter")]),e._v(": 路由独享守卫")]),e._v(" "),_("li",[_("code",[e._v("beforeRouteEnter")]),e._v(": 路由组件的组件进入路由前钩子。")]),e._v(" "),_("li",[_("code",[e._v("beforeResolve")]),e._v(":"),_("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Frouter.vuejs.org%2Fzh%2Fguide%2Fadvanced%2Fnavigation-guards.html%23%25E5%2585%25A8%25E5%25B1%2580%25E8%25A7%25A3%25E6%259E%2590%25E5%25AE%2588%25E5%258D%25AB",target:"_blank",rel:"noopener noreferrer"}},[e._v("路由全局解析守卫"),_("OutboundLink")],1)]),e._v(" "),_("li",[_("code",[e._v("afterEach")]),e._v(":路由全局后置钩子")]),e._v(" "),_("li",[_("code",[e._v("beforeCreate")]),e._v(":组件生命周期，不能访问"),_("code",[e._v("this")]),e._v("。")]),e._v(" "),_("li",[_("code",[e._v("created")]),e._v(":组件生命周期，可以访问"),_("code",[e._v("this")]),e._v("，不能访问dom。")]),e._v(" "),_("li",[_("code",[e._v("beforeMount")]),e._v(":组件生命周期")]),e._v(" "),_("li",[_("code",[e._v("deactivated")]),e._v(": 离开缓存组件a，或者触发a的"),_("code",[e._v("beforeDestroy")]),e._v("和"),_("code",[e._v("destroyed")]),e._v("组件销毁钩子。")]),e._v(" "),_("li",[_("code",[e._v("mounted")]),e._v(":访问/操作dom。")]),e._v(" "),_("li",[_("code",[e._v("activated")]),e._v(":进入缓存组件，进入a的嵌套子组件(如果有的话)。")]),e._v(" "),_("li",[e._v("执行beforeRouteEnter回调函数next。")])])])},[],!1,null,null,null);v.default=r.exports}}]);